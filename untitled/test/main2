/* Example hwloc API program.
 *
 * See other examples under doc/examples/ in the source tree
 * for more details.
 *
 * Copyright © 2009-2015 Inria.  All rights reserved.
 * Copyright © 2009-2011 Université Bordeaux
 * Copyright © 2009-2010 Cisco Systems, Inc.  All rights reserved.
 * See COPYING in top-level directory.
 *
 * hwloc-hello.c
 */

#include <hwloc.h>
#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <CL/cl_ext.h>
#include <sys/syscall.h>


#include <CL/cl.h>

#include "C_common/err_code.h"

#include <pthread.h>

#include <time.h>
static void print_children(hwloc_topology_t topology, hwloc_obj_t obj,
                           int depth)
{
    char type[32], attr[1024];
    unsigned i;
    hwloc_obj_type_snprintf(type, sizeof(type), obj, 0);
    printf("%*s%s", 2*depth, "", type);
    if (obj->os_index != (unsigned) -1)
        printf("#%u", obj->os_index);
    hwloc_obj_attr_snprintf(attr, sizeof(attr), obj, " ", 0);
    if (*attr)
        printf("(%s)", attr);
    printf("\n");
    for (i = 0; i < obj->arity; i++) {
        print_children(topology, obj->children[i], depth + 1);
    }
}
void *thread_print(void *input_ptr){

    int *temp_ptr = (int *)input_ptr;
    int i=0;
    for (i=0; i<2;i++)
    printf("Number of thread %d, %d \n",*temp_ptr, i);
}
static inline int getcpu() {
#ifdef SYS_getcpu
    int cpu, status;
    status = syscall(SYS_getcpu, &cpu, NULL, NULL);
    return (status == -1) ? status : cpu;
#else
    return -1; // unavailable
#endif
}


int main(void)
{
    int my_cpu = getcpu();

    printf("MY CPU IS: %d \n", my_cpu);


    cl_int err;
    // Find the number of OpenCL platforms
    cl_uint num_platforms;
    err = clGetPlatformIDs(0, NULL, &num_platforms);
    checkError(err, "Finding platforms");
    if (num_platforms == 0)
    {
        printf("Found 0 platforms!\n");
        return EXIT_FAILURE;
    }
    // Create a list of platform IDs
    cl_platform_id platform[num_platforms];
    err = clGetPlatformIDs(num_platforms, platform, NULL);
    checkError(err, "Getting platforms");

    printf("\nNumber of OpenCL platforms: %d\n", num_platforms);
    printf("\n-------------------------\n");

    int dim =100;
    int plat_dev_pci_num[dim][dim];

    for(int i =0; i<dim; i++)
        for(int j =0; j<dim; j++)
                plat_dev_pci_num[i][j] =-1;

    // Investigate each platform
    for (int i = 0; i < num_platforms; i++)
    {
        cl_char string[10240] = {0};
        // Print out the platform name
        err = clGetPlatformInfo(platform[i], CL_PLATFORM_NAME, sizeof(string), &string, NULL);
        checkError(err, "Getting platform name");
        printf("Platform: %s\n", string);

        // Print out the platform vendor
        err = clGetPlatformInfo(platform[i], CL_PLATFORM_VENDOR, sizeof(string), &string, NULL);
        checkError(err, "Getting platform vendor");
        printf("Vendor: %s\n", string);

        // Print out the platform OpenCL version
        err = clGetPlatformInfo(platform[i], CL_PLATFORM_VERSION, sizeof(string), &string, NULL);
        checkError(err, "Getting platform OpenCL version");
        printf("Version: %s\n", string);

        // Count the number of devices in the platform
        cl_uint num_devices;
        err = clGetDeviceIDs(platform[i], CL_DEVICE_TYPE_ALL, 0, NULL, &num_devices);
        checkError(err, "Finding devices");

        // Get the device IDs
        cl_device_id device[num_devices];
        err = clGetDeviceIDs(platform[i], CL_DEVICE_TYPE_ALL, num_devices, device, NULL);
        checkError(err, "Getting devices");
        printf("Number of devices: %d\n", num_devices);

        // Investigate each device
        for (int j = 0; j < num_devices; j++)
        {
            printf("\t-------------------------\n");

            cl_uint adbit =0;
             clGetDeviceInfo( device[j], CL_DEVICE_VENDOR_ID,sizeof(adbit), &adbit, NULL);

            plat_dev_pci_num[i][j]=(int)adbit;
            printf("\t\tCL_DEVICE_VENDOR_ID : %x\n", (int)adbit);












          //  printf("\t\tName of PCI : %s\n", string);


            // Get device name
            err = clGetDeviceInfo(device[j], CL_DEVICE_NAME, sizeof(string), &string, NULL);
            checkError(err, "Getting device name");
            printf("\t\tName: %s\n", string);

            // Get device OpenCL version
            err = clGetDeviceInfo(device[j], CL_DEVICE_OPENCL_C_VERSION, sizeof(string), &string, NULL);
            checkError(err, "Getting device OpenCL C version");
            printf("\t\tVersion: %s\n", string);

            // Get Max. Compute units
            cl_uint num;
            err = clGetDeviceInfo(device[j], CL_DEVICE_MAX_COMPUTE_UNITS, sizeof(cl_uint), &num, NULL);
            checkError(err, "Getting device max compute units");
            printf("\t\tMax. Compute Units: %d\n", num);

            // Get local memory size
            cl_ulong mem_size;
            err = clGetDeviceInfo(device[j], CL_DEVICE_LOCAL_MEM_SIZE, sizeof(cl_ulong), &mem_size, NULL);
            checkError(err, "Getting device local memory size");
            printf("\t\tLocal Memory Size: %llu KB\n", mem_size/1024);

            // Get global memory size
            err = clGetDeviceInfo(device[j], CL_DEVICE_GLOBAL_MEM_SIZE, sizeof(cl_ulong), &mem_size, NULL);
            checkError(err, "Getting device global memory size");
            printf("\t\tGlobal Memory Size: %llu MB\n", mem_size/(1024*1024));

            // Get maximum buffer alloc. size
            err = clGetDeviceInfo(device[j], CL_DEVICE_MAX_MEM_ALLOC_SIZE, sizeof(cl_ulong), &mem_size, NULL);
            checkError(err, "Getting device max allocation size");
            printf("\t\tMax Alloc Size: %llu MB\n", mem_size/(1024*1024));

            // Get work-group size information
            size_t size;
            err = clGetDeviceInfo(device[j], CL_DEVICE_MAX_WORK_GROUP_SIZE, sizeof(size_t), &size, NULL);
            checkError(err, "Getting device max work-group size");
            printf("\t\tMax Work-group Total Size: %ld\n", size);

            // Find the maximum dimensions of the work-groups
            err = clGetDeviceInfo(device[j], CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS, sizeof(cl_uint), &num, NULL);
            checkError(err, "Getting device max work-item dims");
            // Get the max. dimensions of the work-groups
            size_t dims[num];
            err = clGetDeviceInfo(device[j], CL_DEVICE_MAX_WORK_ITEM_SIZES, sizeof(dims), &dims, NULL);
            checkError(err, "Getting device max work-item sizes");
            printf("\t\tMax Work-group Dims: ( ");
            for (size_t k = 0; k < num; k++)
            {
                printf("%ld ", dims[k]);
            }
            printf(")\n");

            printf("\t-------------------------\n");
        }

        printf("\n-------------------------\n");
    }

    for(int i =0; i<dim; i++)
        for(int j =0; j<dim; j++) {

        if ( plat_dev_pci_num[i][j]  !=-1)
            printf("Platform %d, device %d, number: %d \n",i,j,plat_dev_pci_num[i][j]);

        }

/*

    for (int i = 0; i < num_platforms; i++) {
        cl_char string[10240] = {0};
        err = clGetPlatformInfo(platform[0], CL_DEVICE_PCI_BUS_ID_NV, sizeof(string), &string, NULL);
        //checkError(err, "Getting platform name");
        printf("PCI BUS: %s\n", string);
    }

*/
    int depth;
    unsigned i, n;
    unsigned long size;
    int levels;
    char string[128];
    int topodepth;
    hwloc_topology_t topology;
    hwloc_cpuset_t cpuset;
    hwloc_obj_t obj;
    /* Allocate and initialize topology object. */
    hwloc_topology_init(&topology);
    hwloc_topology_set_flags(topology, HWLOC_TOPOLOGY_FLAG_IO_DEVICES);

    /* ... Optionally, put detection configuration here to ignore
       some objects types, define a synthetic topology, etc....
       The default is to detect all the objects of the machine that
       the caller is allowed to access.  See Configure Topology
       Detection. */
    /* Perform the topology detection. */
    hwloc_topology_load(topology);
    /* Optionally, get some additional topology information
       in case we need the topology depth later. */
    topodepth = hwloc_topology_get_depth(topology);
    /*****************************************************************
     * First example:
     * Walk the topology with an array style, from level 0 (always
     * the system level) to the lowest level (always the proc level).
     *****************************************************************/
    for (depth = 0; depth < topodepth; depth++) {
        printf("*** Objects at level %d\n", depth);
        for (i = 0; i < hwloc_get_nbobjs_by_depth(topology, depth);
             i++) {
            hwloc_obj_type_snprintf(string, sizeof(string),
                                    hwloc_get_obj_by_depth(topology, depth, i), 0);
            printf("Index %u: %s\n", i, string);
        }
    }
    /*****************************************************************
     * Second example:
     * Walk the topology with a tree style.
     *****************************************************************/
  //  printf("*** Printing overall tree\n");
   // print_children(topology, hwloc_get_root_obj(topology), 0);


    int test =hwloc_get_type_depth(topology,HWLOC_OBJ_PCI_DEVICE);
    printf("DEPTH OF PCI %d \n", test);


    for (i = 0; i < hwloc_get_nbobjs_by_depth(topology, test);
         i++) {
        hwloc_obj_type_snprintf(string, sizeof(string),
                                hwloc_get_obj_by_depth(topology, test, i), 0);
        hwloc_obj_t objPCI = hwloc_get_obj_by_depth(topology, test, i);


        printf("Dupa %x \n",  objPCI->attr->pcidev.vendor_id);


    //    printf("PARENT  %s \n",  objPCI->parent->name);

        printf("Index %u: %s\n", i, string);
    }



    int idx = 0;
    hwloc_get_obj_by_depth(topology, test, idx);
    printf("IDX %d \n", idx);



    hwloc_obj_type_t  type= 	hwloc_get_depth_type (topology, test);
    printf("DEPTH OF Type %d \n", type);

    int depth2 =hwloc_get_nbobjs_by_depth(topology, test);

    printf("how many bjects  %d \n", depth2);


    /*****************************************************************
     * Bind to only one thread of the last core of the machine.
     *
     * First find out where cores are, or else smaller sets of CPUs if
     * the OS doesn't have the notion of a "core".
     *****************************************************************/

    /*
    clock_t start = clock();

    depth = hwloc_get_type_or_below_depth(topology, HWLOC_OBJ_CORE); // depth where cores are

    size_t amountOfCores =0;

    amountOfCores = hwloc_get_nbobjs_by_depth(topology, depth);
    int iter =0;

    for (iter =0; iter<amountOfCores; iter++){

        obj[iter] = hwloc_get_obj_by_depth(topology, depth,iter);
        printf(" Core number %d \n",iter);

        cpuset[iter] = hwloc_bitmap_dup(obj[iter]->cpuset);
        hwloc_bitmap_singlify(cpuset[iter]); // will keep the process in one thread if few processors in  core
        if (hwloc_set_cpubind(topology, cpuset[iter], 0)) {
            char *str;
            int error = errno;
            hwloc_bitmap_asprintf(&str, obj[iter]->cpuset);
            printf("Couldn't bind to cpuset %s: %s\n", str, strerror(error));
            free(str);
        }else
        {
            pthread_create(&inc_threads[iter], NULL, thread_print, &iter);
//  hwloc_thread_t  is equivalent to pthread_t

            hwloc_set_thread_cpubind 	(topology,inc_threads[iter],
                    cpuset[iter],  HWLOC_CPUBIND_THREAD );
//https://www.open-mpi.org/projects/hwloc/doc/v1.11.3/a00083.php#gae42c01b2addcfbf6048b9a516dd7a906

        }
        // Free our cpuset copy
        hwloc_bitmap_free(cpuset[iter]);

    }

*/
    /*****************************************************************
     * Sixth example:
     * Allocate some memory on the last NUMA node, bind some existing
     * memory to the last NUMA node.
     *****************************************************************/
    /* Get last node.
    n = hwloc_get_nbobjs_by_type(topology, HWLOC_OBJ_NUMANODE);

    if (n) {
        void *m;
        size = 1024*1024;
        obj = hwloc_get_obj_by_type(topology, HWLOC_OBJ_NUMANODE, n - 1);
        m = hwloc_alloc_membind_nodeset(topology, size, obj->nodeset,
                                        HWLOC_MEMBIND_BIND, 0);
        hwloc_free(topology, m, size);
        m = malloc(size);
        hwloc_set_area_membind_nodeset(topology, m, size, obj->nodeset,
                                       HWLOC_MEMBIND_BIND, 0);
        free(m);
    }*/
    /* Destroy topology object. */
    hwloc_topology_destroy(topology);
/*
int j=0;
    for(j=0; j<4;j++)
    Athread_print();
*/
//    clock_t end = clock();
 //   float seconds = (float)(end - start) / CLOCKS_PER_SEC;

  //  printf("timer %f \n",seconds );

    return 0;
}

